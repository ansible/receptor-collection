---
- when: custom_ca_certfile is defined or custom_ca_keyfile is defined
  block:
    - name: Ensure both CA files are provided
      assert:
        quiet: true
        that:
          - custom_ca_certfile | default('') | length
          - custom_ca_keyfile | default('') | length
        fail_msg: >
          "You must provide both 'custom_ca_certfile' and 'custom_ca_keyfile'."

    - name: Check TLS CA private key modulus
      delegate_to: localhost
      become: false
      command: openssl rsa -modulus -noout -in "{{ custom_ca_keyfile }}"
      register: _ca_keyfile_modulus

    - name: Check TLS CA x509 key modulus
      delegate_to: localhost
      become: false
      command: openssl x509 -modulus -noout -in "{{ custom_ca_certfile }}"
      register: _ca_certfile_modulus

    - name: Ensure TLS CA pair matches
      assert:
        quiet: true
        that:
          - _ca_keyfile_modulus.stdout == _ca_certfile_modulus.stdout
        fail_msg: >
          "TLS !modulus! for {{ custom_ca_keyfile }} and {{ custom_ca_certfile }} doesn't match."
        success_msg: "TLS !modulus! for {{ custom_ca_keyfile }} and {{ custom_ca_certfile }} matches."

    - name: Upload TLS CA files
      become: yes
      become_user: "{{ receptor_user }}"
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ receptor_user }}"
        group: "{{ receptor_group }}"
        mode: '0640'
      with_items:
        - { src: '{{ custom_ca_certfile }}', dest: '{{ receptor_ca_certfile }}' }
        - { src: '{{ custom_ca_keyfile }}', dest: '{{ receptor_ca_keyfile }}' }

- when:
    - not custom_ca_certfile | default('')
    - not custom_ca_keyfile | default('')
  block:
    - assert:
        quiet: true
        that:
          - receptor_primary_node is defined
          - receptor_primary_node in hostvars
        fail_msg: "receptor_primary_node must be defined."

    - run_once: true
      include_tasks: tls_ca.yml
      when: inventory_hostname == receptor_primary_node

    - name: Upload the CA files
      no_log: true
      copy:
        content: "{{ item['content'] | b64decode }}"
        dest: "{{ item['source'] }}"
        owner: "{{ receptor_user }}"
        group: "{{ receptor_group }}"
        mode: '0640'
      with_items:
        - "{{ hostvars[receptor_primary_node]['_ca_data']['results'] }}"

- name: Generate new certificates
  block:
    - name: Obtain all IPv4 addresses from node
      set_fact:
        receptor_ipaddress_cmd: "ipaddress={{ hostvars[inventory_hostname]['ansible_all_ipv4_addresses'] | join(' ipaddress=') }}"

    - name: Validate if receptor_host_identifier is an IP address
      set_fact:
        _dnsname_valid_ipadddr: "{{ receptor_host_identifier | regex_search(regexp) }}"
      vars:
        regexp: "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$"

    - name: Include the IP address x509 extension on the Receptor certificate
      set_fact:
        receptor_ipaddress_cmd: "ipaddress={{ receptor_host_identifier }}"
      when:
        - _dnsname_valid_ipadddr != None
        - _dnsname_valid_ipadddr|length > 0
        - receptor_host_identifier not in receptor_ipaddress_cmd

    - name: Add dnsname option to the Receptor certificate
      set_fact:
        x509_dnsname_cmd: "dnsname={{ receptor_host_identifier }}"
      when: _dnsname_valid_ipadddr == '' or _dnsname_valid_ipadddr == None

    - name: Create node certificates
      become: yes
      become_user: "{{ receptor_user }}"
      register: _tls_csr_pending
      shell: >
        receptor --cert-makereq commonname="{{ receptor_host_identifier }}"
        bits="{{ receptor_tls_bits }}"
        nodeid="{{ receptor_host_identifier }}"
        outreq="{{ receptor_tls_certfile }}"
        outkey="{{ receptor_tls_keyfile }}"
        {{ receptor_ipaddress_cmd | default(None) }}
        {{ x509_dnsname_cmd | default('') }}

- name: Gather Receptor CA metadata
  community.crypto.x509_certificate_info:
    path: "{{ receptor_ca_certfile }}"
  register: _ca_certfile_metadata

- name: Store Receptor CA expiry date as a fact
  block:
  - set_fact:
      _expiration_from_cert: "{{ _ca_certfile_metadata.not_after | to_datetime(format='%Y%m%d%H%M%SZ') }}" #20310920155104Z
  - set_fact:
      _epoch: "{{ (_expiration_from_cert | to_datetime).timestamp() }}" #1947700264.0
  - set_fact:
      _epoch_minus_delta: "{{ (_epoch|int)-(86400*receptor_tls_expiration_delta_days) }}"
  - set_fact:
      _datetime_with_z: "{{ '%Y-%m-%dT%H:%M:%S%z' | strftime(_epoch_minus_delta) }}" #2031-09-20T15:51:04-0400
  - set_fact:
      _cert_expiry_date: "{{ _datetime_with_z[:-2] }}:{{ _datetime_with_z[-2:] }}" #2031-09-20T15:51:04-04:00

- name: Sign Receptor node certificate
  become: yes
  become_user: "{{ receptor_user }}"
  shell: >
    receptor --cert-signreq verify=yes
    cacert="{{ receptor_ca_certfile }}"
    cakey="{{ receptor_ca_keyfile }}"
    req="{{ receptor_tls_dir }}/{{ receptor_host_identifier }}.csr"
    outcert="{{ receptor_tls_certfile }}"
    notafter="{{ _cert_expiry_date }}"

- name: Gather Certificate Sign Requests files to be removed
  find:
    paths: "{{ receptor_tls_dir }}"
    patterns: '*.csr'
  register: _csr_to_remove

- name: Remove directory content
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ _csr_to_remove.files }}"

# FIXME: clean up the CA private key if custom_ca_keyfile is set? or something else?
